public static int DivRoundUp(int dividend, int divisor)
{
    if (divisor = = 0 ) throw ...
        if (divisor = = -1 && dividend = = Int32.MinValue) throw ...
            int roundedTowardsZeroQuotient = dividend / divisor;
    bool dividedEvenly = (dividend % divisor) = = 0;
    if (dividedEvenly)
        return roundedTowardsZeroQuotient;
    // At this point we know that divisor was not zero
    // (because we would have thrown) and we know that
    // dividend was not zero (because there would have been no remainder)
    // Therefore both are non-zero.  Either they are of the same sign,
    // or opposite signs. If they're of opposite sign then we rounded
    // UP towards zero so we're done. If they're of the same sign then
    // we rounded DOWN towards zero, so we need to add one.
    bool wasRoundedDown = ((divisor > 0) = = (dividend > 0));
    if (wasRoundedDown)
        return roundedTowardsZeroQuotient + 1;
    else
        return roundedTowardsZeroQuotient;
}
